!function e(n,t,i){function o(r,a){if(!t[r]){if(!n[r]){var c="function"==typeof require&&require;if(!a&&c)return c(r,!0);if(s)return s(r,!0);var l=new Error("Cannot find module '"+r+"'");throw l.code="MODULE_NOT_FOUND",l}var h=t[r]={exports:{}};n[r][0].call(h.exports,function(e){var t=n[r][1][e];return o(t||e)},h,h.exports,e,n,t,i)}return t[r].exports}for(var s="function"==typeof require&&require,r=0;r<i.length;r++)o(i[r]);return o}({1:[function(e,n,t){n.exports=function(e){"string"==typeof e&&(e=[e]);for(var n=[].slice.call(arguments,1),t=[],i=0;i<e.length-1;i++)t.push(e[i],n[i]||"");return t.push(e[i]),t.join("")}},{}],2:[function(e,n,t){!function(e){var t=/iPhone/i,i=/iPod/i,o=/iPad/i,s=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,r=/Android/i,a=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,c=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,l=/Windows Phone/i,h=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,d=/BlackBerry/i,u=/BB10/i,p=/Opera Mini/i,v=/(CriOS|Chrome)(?=.*\bMobile\b)/i,f=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,m=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),g=function(e,n){return e.test(n)},x=function(e){var n=e||navigator.userAgent,x=n.split("[FBAN");if(void 0!==x[1]&&(n=x[0]),void 0!==(x=n.split("Twitter"))[1]&&(n=x[0]),this.apple={phone:g(t,n),ipod:g(i,n),tablet:!g(t,n)&&g(o,n),device:g(t,n)||g(i,n)||g(o,n)},this.amazon={phone:g(a,n),tablet:!g(a,n)&&g(c,n),device:g(a,n)||g(c,n)},this.android={phone:g(a,n)||g(s,n),tablet:!g(a,n)&&!g(s,n)&&(g(c,n)||g(r,n)),device:g(a,n)||g(c,n)||g(s,n)||g(r,n)},this.windows={phone:g(l,n),tablet:g(h,n),device:g(l,n)||g(h,n)},this.other={blackberry:g(d,n),blackberry10:g(u,n),opera:g(p,n),firefox:g(f,n),chrome:g(v,n),device:g(d,n)||g(u,n)||g(p,n)||g(f,n)||g(v,n)},this.seven_inch=g(m,n),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window)return this},y=function(){var e=new x;return e.Class=x,e};void 0!==n&&n.exports&&"undefined"==typeof window?n.exports=x:void 0!==n&&n.exports&&"undefined"!=typeof window?n.exports=y():"function"==typeof define&&define.amd?define("isMobile",[],e.isMobile=y()):e.isMobile=y()}(this)},{}],3:[function(e,n,t){"use strict";var i=e("glslify"),o=i(["#define GLSLIFY 1\n#define GLSLIFY 1\nattribute vec3 position;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nvarying vec2 vUv;\nvoid main() {\n  gl_Position = vec4(position, 1.0);\n  vUv = vec2(position.x, position.y) * 0.5 + 0.5;\n}\n\n"]),s=i(['precision mediump float;\n#define GLSLIFY 1\n#define GLSLIFY 1\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1(vec4 x)\n{\n  return mod289_1(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289_1(Pi0);\n  Pi1 = mod289_1(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute_1(permute_1(ix) + iy);\n  vec4 ixy0 = permute_1(ixy + iz0);\n  vec4 ixy1 = permute_1(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt_1(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt_1(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_0(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_0(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_0(vec4 x) {\n     return mod289_0(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_0(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_0 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_0;\n  vec3 i1 = min( g_0.xyz, l.zxy );\n  vec3 i2 = max( g_0.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_0(i);\n  vec4 p = permute_0( permute_0( permute_0(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_0(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame, float multiplier) {\n    vec2 mult = texCoord * resolution;\n    float offset = snoise(vec3(mult / multiplier, frame));\n    float n1 = pnoise(vec3(mult, offset), vec3(1.0/texCoord * resolution, 1.0));\n    return n1 / 2.0 + 0.5;\n}\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame) {\n    return grain(texCoord, resolution, frame, 2.5);\n}\n\nfloat grain(vec2 texCoord, vec2 resolution) {\n    return grain(texCoord, resolution, 0.0);\n}\n\nvec3 blendSoftLight(vec3 base, vec3 blend) {\n    return mix(\n        sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend), \n        2.0 * base * blend + base * base * (1.0 - 2.0 * blend), \n        step(base, vec3(0.5))\n    );\n}\n\n// Using conditionals\n// vec3 blendSoftLight(vec3 base, vec3 blend) {\n//     return vec3(\n//         ((blend.r < 0.5) ? (2.0 * base.r * blend.r + base.r * base.r * (1.0 - 2.0 * blend.r)) : (sqrt(base.r) * (2.0 * blend.r - 1.0) + 2.0 * base.r * (1.0 - blend.r))),\n//         ((blend.g < 0.5) ? (2.0 * base.g * blend.g + base.g * base.g * (1.0 - 2.0 * blend.g)) : (sqrt(base.g) * (2.0 * blend.g - 1.0) + 2.0 * base.g * (1.0 - blend.g))),\n//         ((blend.b < 0.5) ? (2.0 * base.b * blend.b + base.b * base.b * (1.0 - 2.0 * blend.b)) : (sqrt(base.b) * (2.0 * blend.b - 1.0) + 2.0 * base.b * (1.0 - blend.b)))\n//     );\n// }\n\nuniform vec3 color1;\nuniform vec3 color2;\nuniform float aspect;\nuniform vec2 offset;\nuniform vec2 scale;\nuniform float noiseAlpha;\nuniform bool aspectCorrection;\nuniform float grainScale;\nuniform float grainTime;\nuniform vec2 smooth;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec2 q = vec2(vUv - 0.5);\n  if (aspectCorrection) {\n    q.x *= aspect;\n  }\n  q /= scale;\n  q -= offset;\n  float dst = length(q);\n  dst = smoothstep(smooth.x, smooth.y, dst);\n  vec3 color = mix(color1, color2, dst);\n  \n  if (noiseAlpha > 0.0 && grainScale > 0.0) {\n    float gSize = 1.0 / grainScale;\n    float g = grain(vUv, vec2(gSize * aspect, gSize), grainTime);\n    vec3 noiseColor = blendSoftLight(color, vec3(g));\n    gl_FragColor.rgb = mix(color, noiseColor, noiseAlpha);\n  } else {\n    gl_FragColor.rgb = color;\n  }\n  gl_FragColor.a = 1.0;\n}']);n.exports=function(e){function n(e,n){return Array.isArray(e)?(new n).fromArray(e):e}var t=(e=e||{}).geometry||new THREE.PlaneBufferGeometry(2,2,1),i=window.innerWidth>window.innerHeight?"landscape":"portrait",r=new THREE.RawShaderMaterial({vertexShader:o,fragmentShader:s,side:THREE.DoubleSide,uniforms:{aspectCorrection:{type:"i",value:!1},aspect:{type:"f",value:1},grainScale:{type:"f",value:1e-5},grainTime:{type:"f",value:0},noiseAlpha:{type:"f",value:.3},offset:{type:"v2",value:new THREE.Vector2(0,0)},scale:{type:"v2",value:new THREE.Vector2(1,1)},smooth:{type:"v2",value:new THREE.Vector2(0,"landscape"===i?.5:.9)},color1:{type:"c",value:new THREE.Color("#317db2")},color2:{type:"c",value:new THREE.Color("#3d3c41")}},depthTest:!1}),a=new THREE.Mesh(t,r);return a.frustumCulled=!1,a.style=function(e){if(e=e||{},Array.isArray(e.colors)){var t=e.colors.map(function(e){return"string"==typeof e||"number"==typeof e?new THREE.Color(e):e});r.uniforms.color1.value.copy(t[0]),r.uniforms.color2.value.copy(t[1])}if("number"==typeof e.aspect&&(r.uniforms.aspect.value=e.aspect),"number"==typeof e.grainScale&&(r.uniforms.grainScale.value=e.grainScale),"number"==typeof e.grainTime&&(r.uniforms.grainTime.value=e.grainTime),e.smooth){var i=n(e.smooth,THREE.Vector2);r.uniforms.smooth.value.copy(i)}if(e.offset){var o=n(e.offset,THREE.Vector2);r.uniforms.offset.value.copy(o)}if("number"==typeof e.noiseAlpha&&(r.uniforms.noiseAlpha.value=e.noiseAlpha),void 0!==e.scale){var s=e.scale;"number"==typeof s&&(s=[s,s]),s=n(s,THREE.Vector2),r.uniforms.scale.value.copy(s)}void 0!==e.aspectCorrection&&(r.uniforms.aspectCorrection.value=Boolean(e.aspectCorrection))},e&&a.style(e),a}},{glslify:1}],4:[function(e,n,t){"use strict";function i(e){this.params=Object.assign({},{count:300,radius:600,showDots:!0,showLines:!0,maxDistance:50,maxConnections:2,maxTotalConnections:500,speed:3,rotationSpeed:.25,showSphere:!0},e),this.particlesData=[]}var o=e("./bg"),s=e("ismobilejs");i.prototype={init:function(){if(Detector.webgl)return this.onLoadComplete(),this;Detector.addGetWebGLMessage()},onLoadComplete:function(e){this.initCamera().initScene().initGroup().initMaterials().initRenderer().initUI().initDatGui().initStats().initControls().initEvents().onWindowResize().initMouseParallax().initElements().initBg().initClock().animate()},initCamera:function(){return this.camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,4e3),this.camera.position.z=1750,this},initScene:function(){return this.scene=new THREE.Scene,this.scene.fog=new THREE.FogExp2(0,3e-4),this},initGroup:function(){return this.group=new THREE.Group,this.linesGroup=new THREE.Group,this.particlesGroup=new THREE.Group,this.group.add(this.linesGroup),this.group.add(this.particlesGroup),this.scene.add(this.group),this},initMaterials:function(){return this.particlesMaterial=new THREE.PointsMaterial({color:16777215,size:3,blending:THREE.AdditiveBlending,transparent:!0,sizeAttenuation:!1}),this.linesMaterial=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,blending:THREE.AdditiveBlending,transparent:!0,fog:!0,color:16777215}),this.sphereMaterial=new THREE.MeshBasicMaterial({wireframe:!0,wireframeLinewidth:.1,transparent:!0,opacity:.1,fog:!0,blending:THREE.AdditiveBlending}),this},initRenderer:function(){return this.container=document.createElement("div"),document.body.appendChild(this.container),this.renderer=new THREE.WebGLRenderer({antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.gammaInput=!0,this.renderer.gammaOutput=!0,this.container.appendChild(this.renderer.domElement),this},initUI:function(){return this.uiContainer=document.getElementById("ui"),document.getElementById("ui-btn").addEventListener("click",function(e){document.body.classList.toggle("show-ui")}),this},initDatGui:function(){var e=this;return this.gui=new dat.GUI({autoPlace:!1}),this.gui.add(this.params,"maxDistance",0,1e3).listen(),this.gui.add(this.params,"maxConnections",1,20).step(1).listen(),this.gui.add(this.params,"speed",0,20).listen(),this.gui.add(this.params,"rotationSpeed",0,1).step(.01).listen(),this.gui.add(this.params,"showSphere").onChange(function(n){e.sphereMesh&&(e.sphereMesh.material.visible=n,e.sphereMesh.material.needsUpdate=!0)}),this.uiContainer.appendChild(this.gui.domElement),this},initControls:function(){return this.controls=new THREE.OrbitControls(this.camera,this.container),this},initStats:function(){return this.stats=new Stats,this.stats.domElement.style.position="absolute",this.stats.domElement.style.top="0px",this.stats.dom.id="stats",this.uiContainer.appendChild(this.stats.domElement),this},initEvents:function(){return window.addEventListener("resize",this.onWindowResize.bind(this),!1),this},initMouseParallax:function(){var e=this;return this.cameraDistance=1.75,this.theta=0*Math.PI/180,this.angleOffset=40,this.mouseOffset=new THREE.Vector2,this.tmpQuat1=new THREE.Quaternion,this.tmpQuat2=new THREE.Quaternion,this.AXIS_X=new THREE.Vector3(1,0,0),this.AXIS_Y=new THREE.Vector3(0,1,0),document.addEventListener("mousemove",function(n){var t=n.clientX,i=n.clientY;TweenMax.to(e.mouseOffset,.5,{x:t/e.w*2-1,y:i/e.h*2-1,ease:"expoOut",overwrite:"all"})}),this},initElements:function(){var e=this.params.count,n=this.params.radius,t=this.params.maxTotalConnections;this.sphereGeometry=new THREE.SphereBufferGeometry(n,16,16),this.sphereMesh=new THREE.Mesh(this.sphereGeometry,this.sphereMaterial),this.group.add(this.sphereMesh),this.particlesGeometry=new THREE.BufferGeometry,this.particlePositions=this.getSphere(e,n),this.particlesGeometry.addAttribute("position",new THREE.BufferAttribute(this.particlePositions,3).setDynamic(!0)),this.pointCloud=new THREE.Points(this.particlesGeometry,this.particlesMaterial),this.particlesGroup.add(this.pointCloud);for(var i=0;i<e;i++){var o=function(){return(-.5+Math.random())*Math.random()}.bind(this);this.particlesData.push({velocity:new THREE.Vector3(o(),o(),o()),connections:0})}return this.linesGeometry=new THREE.BufferGeometry,this.linePositions=new Float32Array(3*t),this.lineColors=new Float32Array(3*t),this.linesGeometry.addAttribute("position",new THREE.BufferAttribute(this.linePositions,3).setDynamic(!0)),this.linesGeometry.addAttribute("color",new THREE.BufferAttribute(this.lineColors,3).setDynamic(!0)),this.linesGeometry.computeBoundingSphere(),this.linesGeometry.setDrawRange(0,0),this.linesMesh=new THREE.LineSegments(this.linesGeometry,this.linesMaterial),this.linesGroup.add(this.linesMesh),this},getRandomData:function(e,n,t){for(var i=e*n*3,o=new Float32Array(i);i--;)o[i]=(Math.random()-.5)*t;return o},getSphere:function(e,n){for(var t=3*e,i=new Float32Array(t),o=new THREE.Vector3,s=0;s<t;s+=3)!function e(n,t){return n.x=2*Math.random()-1,n.y=2*Math.random()-1,n.z=2*Math.random()-1,n.length()>1?e(n,t):n.normalize().multiplyScalar(t*Math.random())}(o,n),i[s]=o.x,i[s+1]=o.y,i[s+2]=o.z;return i},initBg:function(){return this.background=o(),this.scene.add(this.background),this},onWindowResize:function(){return this.w=window.innerWidth,this.h=window.innerHeight,this.windowHalfX=this.w/2,this.windowHalfY=this.h/2,this.camera.aspect=this.w/this.h,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.w,this.h),this},onDocumentMouseMove:function(e){this.mouseX=e.clientX-this.windowHalfX,this.mouseY=e.clientY-this.windowHalfY},onDocumentTouchStart:function(e){1===e.touches.length&&(e.preventDefault(),this.mouseX=e.touches[0].pageX-this.windowHalfX,this.mouseY=e.touches[0].pageY-this.windowHalfY)},onDocumentTouchMove:function(e){1===e.touches.length&&(e.preventDefault(),this.mouseX=e.touches[0].pageX-this.windowHalfX,this.mouseY=e.touches[0].pageY-this.windowHalfY)},initClock:function(){return this.clock=new THREE.Clock,this.clock.start(),this},animate:function(){requestAnimationFrame(this.animate.bind(this)),this.render(),this.stats.update()},resetAllConnections:function(e){this.connected=0,this.particlesData.forEach(function(e){e.connections=0})},render:function(){var e=this.clock.elapsedTime,n=this.clock.getDelta();this.draw(e,n),this.group.rotation.y=e*this.params.rotationSpeed,this.renderer.render(this.scene,this.camera)},draw:function(e,n){this.resetAllConnections(e);for(var t=this.params.count,i=0,o=0,r=this.params.radius,a=new THREE.Vector3,c=new THREE.Vector3,l=this.particlePositions,h=this.linePositions,d=0;d<t;d++){var u=this.particlesData[d];if(a.x=l[3*d]+=u.velocity.x*this.params.speed,a.y=l[3*d+1]+=u.velocity.y*this.params.speed,a.z=l[3*d+2]+=u.velocity.z*this.params.speed,a.length()>=r+1&&u.velocity.reflect(a.clone().normalize()),!(this.connected>this.params.maxTotalConnections||u.connections>this.params.maxConnections))for(var p=0;p<t;p++)if(d!==p){var v=this.particlesData[p];if(!(u.connections>this.params.maxConnections||v.connections>this.params.maxConnections)){c.x=l[3*p],c.y=l[3*p+1],c.z=l[3*p+2];var f=a.distanceTo(c);if(f<this.params.maxDistance){var m=1-f/this.params.maxDistance;h[i++]=l[3*d],h[i++]=l[3*d+1],h[i++]=l[3*d+2],h[i++]=l[3*p],h[i++]=l[3*p+1],h[i++]=l[3*p+2],this.lineColors[o++]=m,this.lineColors[o++]=m,this.lineColors[o++]=m,this.lineColors[o++]=m,this.lineColors[o++]=m,this.lineColors[o++]=m,u.connections++,v.connections++,this.connected++}}}}if(this.linesMesh.geometry.setDrawRange(0,2*this.connected),this.linesMesh.geometry.attributes.position.needsUpdate=!0,this.linesMesh.geometry.attributes.color.needsUpdate=!0,this.pointCloud.geometry.attributes.position.needsUpdate=!0,!s.any){Math.PI,this.cameraDistance;var g=this.angleOffset*Math.PI/180,x=this.mouseOffset.y*g,y=this.mouseOffset.x*g;this.tmpQuat1.setFromAxisAngle(this.AXIS_X,-x),this.tmpQuat2.setFromAxisAngle(this.AXIS_Y,-y),this.tmpQuat1.multiply(this.tmpQuat2),this.background.style({aspect:this.w/this.h,aspectCorrection:!0,scale:2,offset:[.2*y,-.2*x],grainScale:1.5/Math.min(this.w,this.h)})}}},window.onload=function(){new i({count:250,radius:500,maxDistance:100,maxConnections:5,maxTotalConnections:1e3,speed:5}).init(),document.body.classList.remove("show-loader"),document.body.classList.add("show-ui-btn")}},{"./bg":3,ismobilejs:2}]},{},[4]);
